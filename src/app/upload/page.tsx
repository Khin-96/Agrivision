'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Upload, Camera, Video, Image as ImageIcon, Play, Pause, StopCircle, Loader2, AlertCircle, CheckCircle, Download, FileText } from 'lucide-react';
import Layout from '@/components/layout/Layout';

interface UploadProgress {
  progress: number;
  status: 'idle' | 'uploading' | 'analyzing' | 'success' | 'error';
  error?: string;
}

interface AnalysisResult {
  type: 'image' | 'video';
  filename: string;
  analysis: string;
  timestamp: string;
  preview: string;
}

export default function FarmActivitiesPage() {
  // Live streaming states
  const [isStreaming, setIsStreaming] = useState(false);
  const [streamError, setStreamError] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);

  // Upload states
  const [uploadProgress, setUploadProgress] = useState<UploadProgress>({
    progress: 0,
    status: 'idle'
  });
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [previews, setPreviews] = useState<{ [key: string]: string }>({});

  // File input refs
  const imageInputRef = useRef<HTMLInputElement>(null);
  const videoInputRef = useRef<HTMLInputElement>(null);

  // Download analysis as text
  const downloadAnalysis = (result: AnalysisResult) => {
    const content = `AgriVision AI Analysis Report
========================================

File Name: ${result.filename}
File Type: ${result.type}
Analysis Date: ${new Date(result.timestamp).toLocaleString()}

ANALYSIS RESULTS:
${result.analysis}

----------------------------------------
Generated by AgriVision AI
https://agrivision.example.com
`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    
    const safeFilename = result.filename.replace(/[^a-zA-Z0-9.-]/g, '_');
    link.download = `agrivision_analysis_${safeFilename}.txt`;
    link.href = url;
    link.click();
    
    URL.revokeObjectURL(url);
  };

  // Download analysis as PDF with watermark
  const downloadAnalysisAsPDF = async (result: AnalysisResult) => {
    try {
      // Dynamic import to reduce bundle size
      const { jsPDF } = await import('jspdf');
      
      const doc = new jsPDF();
      
      // Add AgriVision watermark (diagonal across the page)
      doc.setFontSize(40);
      doc.setTextColor(220, 220, 220); // Light gray for watermark
      doc.setGState(new doc.GState({ opacity: 0.1 })); // Very transparent
      doc.text('AgriVision', 30, 150, { angle: 45 });
      doc.text('AI Powered', 60, 180, { angle: 45 });
      
      // Reset graphics state for content
      doc.setGState(new doc.GState({ opacity: 1 }));
      doc.setTextColor(0, 0, 0); // Black for content
      
      // Add header with logo placeholder
      doc.setFontSize(20);
      doc.setTextColor(34, 139, 34); // Green color
      doc.text('AgriVision', 105, 20, { align: 'center' });
      
      doc.setFontSize(16);
      doc.text('AI Analysis Report', 105, 28, { align: 'center' });
      
      // Add separator line
      doc.setDrawColor(34, 139, 34);
      doc.line(20, 35, 190, 35);
      
      // Add file information
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`File Name: ${result.filename}`, 20, 45);
      doc.text(`File Type: ${result.type}`, 20, 52);
      doc.text(`Analysis Date: ${new Date(result.timestamp).toLocaleString()}`, 20, 59);
      
      // Add another separator
      doc.line(20, 65, 190, 65);
      
      // Add analysis title
      doc.setFontSize(14);
      doc.setTextColor(34, 139, 34);
      doc.text('Analysis Results:', 20, 75);
      
      // Add analysis content
      doc.setFontSize(10);
      doc.setTextColor(0, 0, 0);
      const splitText = doc.splitTextToSize(result.analysis, 170);
      
      let yPosition = 85;
      const lineHeight = 7;
      const pageHeight = 280;
      
      for (let i = 0; i < splitText.length; i++) {
        // Check if we need to add a new page
        if (yPosition > pageHeight) {
          doc.addPage();
          yPosition = 20;
          
          // Add watermark to new page
          doc.setFontSize(40);
          doc.setTextColor(220, 220, 220);
          doc.setGState(new doc.GState({ opacity: 0.1 }));
          doc.text('AgriVision', 30, 150, { angle: 45 });
          doc.text('AI Powered', 60, 180, { angle: 45 });
          doc.setGState(new doc.GState({ opacity: 1 }));
          doc.setTextColor(0, 0, 0);
        }
        
        doc.text(splitText[i], 20, yPosition);
        yPosition += lineHeight;
      }
      
      // Add footer with page numbers
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text(`Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
        doc.text('Generated by AgriVision AI - https://agrivision.example.com', 105, 290, { align: 'center' });
      }
      
      // Create safe filename and save
      const safeFilename = result.filename.replace(/[^a-zA-Z0-9.-]/g, '_');
      doc.save(`agrivision_analysis_${safeFilename}.pdf`);
      
    } catch (error) {
      console.error('PDF generation failed:', error);
      // Fall back to text download
      downloadAnalysis(result);
    }
  };

  // Download all analyses as text
  const downloadAllAnalyses = () => {
    if (analysisResults.length === 0) return;

    const content = analysisResults.map((result, index) => 
      `Analysis ${index + 1}
===============

File Name: ${result.filename}
File Type: ${result.type}
Analysis Date: ${new Date(result.timestamp).toLocaleString()}

ANALYSIS RESULTS:
${result.analysis}

----------------------------------------
`
    ).join('\n\n');

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.download = `agrivision_all_analyses_${new Date().toISOString().split('T')[0]}.txt`;
    link.href = url;
    link.click();
    
    URL.revokeObjectURL(url);
  };

  // Download all analyses as PDF
  const downloadAllAnalysesAsPDF = async () => {
    if (analysisResults.length === 0) return;

    try {
      const { jsPDF } = await import('jspdf');
      const doc = new jsPDF();
      
      let currentPage = 1;
      const addWatermark = () => {
        doc.setFontSize(40);
        doc.setTextColor(220, 220, 220);
        doc.setGState(new doc.GState({ opacity: 0.1 }));
        doc.text('AgriVision', 30, 150, { angle: 45 });
        doc.text('AI Powered', 60, 180, { angle: 45 });
        doc.setGState(new doc.GState({ opacity: 1 }));
        doc.setTextColor(0, 0, 0);
      };

      // Add main title and watermark
      doc.setFontSize(20);
      doc.setTextColor(34, 139, 34);
      doc.text('AgriVision Comprehensive Analysis Report', 105, 20, { align: 'center' });
      addWatermark();
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 105, 30, { align: 'center' });
      doc.text(`Total Analyses: ${analysisResults.length}`, 105, 37, { align: 'center' });
      
      doc.line(20, 42, 190, 42);
      
      let yPosition = 50;
      const lineHeight = 7;
      const pageHeight = 270;
      
      analysisResults.forEach((result, index) => {
        // Check if we need a new page
        if (yPosition > pageHeight) {
          doc.addPage();
          currentPage++;
          yPosition = 20;
          addWatermark();
        }
        
        // Add analysis header
        doc.setFontSize(14);
        doc.setTextColor(34, 139, 34);
        doc.text(`Analysis ${index + 1}: ${result.filename}`, 20, yPosition);
        yPosition += 10;
        
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 0);
        doc.text(`Type: ${result.type}`, 20, yPosition);
        yPosition += 7;
        doc.text(`Date: ${new Date(result.timestamp).toLocaleString()}`, 20, yPosition);
        yPosition += 10;
        
        // Add analysis content
        const splitText = doc.splitTextToSize(result.analysis, 170);
        
        for (let i = 0; i < splitText.length; i++) {
          if (yPosition > pageHeight) {
            doc.addPage();
            currentPage++;
            yPosition = 20;
            addWatermark();
          }
          doc.text(splitText[i], 20, yPosition);
          yPosition += lineHeight;
        }
        
        yPosition += 10; // Space between analyses
      });
      
      // Add page numbers
      const totalPages = doc.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text(`Page ${i} of ${totalPages}`, 105, 285, { align: 'center' });
        doc.text('Generated by AgriVision AI - https://agrivision.example.com', 105, 290, { align: 'center' });
      }
      
      doc.save(`agrivision_comprehensive_report_${new Date().toISOString().split('T')[0]}.pdf`);
      
    } catch (error) {
      console.error('PDF generation failed:', error);
      downloadAllAnalyses();
    }
  };

  // Start live video streaming
  const startStreaming = async () => {
    try {
      setStreamError(null);
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 1280, height: 720 },
        audio: false
      });
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        setIsStreaming(true);
      }
    } catch (error) {
      console.error('Error accessing camera:', error);
      setStreamError('Unable to access camera. Please check permissions.');
    }
  };

  // Stop live video streaming
  const stopStreaming = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    setIsStreaming(false);
    setStreamError(null);
  };

  // Create preview for uploaded files
  const createPreview = (file: File): Promise<string> => {
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target?.result as string);
      reader.readAsDataURL(file);
    });
  };

  // Upload and analyze file
  const uploadAndAnalyze = async (file: File, type: 'image' | 'video') => {
    setUploadProgress({ progress: 0, status: 'uploading' });
    
    try {
      // Create preview
      const preview = await createPreview(file);
      setPreviews(prev => ({ ...prev, [file.name]: preview }));

      // Prepare form data
      const formData = new FormData();
      formData.append('file', file);
      formData.append('type', type);

      // Upload with progress tracking
      const xhr = new XMLHttpRequest();
      
      // Track upload progress
      xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
          const progress = Math.round((event.loaded / event.total) * 50);
          setUploadProgress(prev => ({ ...prev, progress }));
        }
      };

      // Handle response
      xhr.onload = async () => {
        if (xhr.status === 200) {
          setUploadProgress(prev => ({ ...prev, progress: 50, status: 'analyzing' }));
          
          const response = JSON.parse(xhr.responseText);
          
          // Simulate analysis progress
          for (let i = 60; i <= 100; i += 10) {
            setUploadProgress(prev => ({ ...prev, progress: i }));
            await new Promise(resolve => setTimeout(resolve, 200));
          }

          const result: AnalysisResult = {
            type,
            filename: file.name,
            analysis: response.analysis,
            timestamp: new Date().toISOString(),
            preview
          };

          setAnalysisResults(prev => [result, ...prev]);
          setUploadProgress({ progress: 100, status: 'success' });
          
          // Reset after 2 seconds
          setTimeout(() => {
            setUploadProgress({ progress: 0, status: 'idle' });
            setPreviews(prev => {
              const newPreviews = { ...prev };
              delete newPreviews[file.name];
              return newPreviews;
            });
          }, 2000);
        } else {
          throw new Error(`Upload failed: ${xhr.statusText}`);
        }
      };

      xhr.onerror = () => {
        setUploadProgress({
          progress: 0,
          status: 'error',
          error: 'Upload failed. Please try again.'
        });
      };

      xhr.open('POST', '/api/farm-activities/analyze');
      xhr.send(formData);

    } catch (error) {
      console.error('Upload error:', error);
      setUploadProgress({
        progress: 0,
        status: 'error',
        error: error instanceof Error ? error.message : 'Upload failed'
      });
    }
  };

  // Handle file selection
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>, type: 'image' | 'video') => {
    const file = event.target.files?.[0];
    if (file) {
      uploadAndAnalyze(file, type);
    }
    event.target.value = '';
  };

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const getStatusIcon = () => {
    switch (uploadProgress.status) {
      case 'uploading':
      case 'analyzing':
        return <Loader2 className="w-4 h-4 animate-spin" />;
      case 'success':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'error':
        return <AlertCircle className="w-4 h-4 text-red-500" />;
      default:
        return null;
    }
  };

  const getStatusText = () => {
    switch (uploadProgress.status) {
      case 'uploading':
        return 'Uploading...';
      case 'analyzing':
        return 'Analyzing with AI...';
      case 'success':
        return 'Analysis complete!';
      case 'error':
        return uploadProgress.error || 'Error occurred';
      default:
        return '';
    }
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Farm Activities</h1>
            <p className="text-gray-600">Monitor and analyze your farming activities with AI-powered insights</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Live Video Streaming Section */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-800 flex items-center">
                  <Video className="w-5 h-5 mr-2" />
                  Live Farm Monitor
                </h2>
                <div className="flex gap-2">
                  {!isStreaming ? (
                    <button
                      onClick={startStreaming}
                      className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                    >
                      <Play className="w-4 h-4 mr-2" />
                      Start Camera
                    </button>
                  ) : (
                    <button
                      onClick={stopStreaming}
                      className="flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                    >
                      <StopCircle className="w-4 h-4 mr-2" />
                      Stop Camera
                    </button>
                  )}
                </div>
              </div>

              <div className="relative bg-gray-900 rounded-lg overflow-hidden" style={{ aspectRatio: '16/9' }}>
                <video
                  ref={videoRef}
                  autoPlay
                  playsInline
                  muted
                  className="w-full h-full object-cover"
                />
                {!isStreaming && (
                  <div className="absolute inset-0 flex items-center justify-center">
                    <div className="text-center text-gray-400">
                      <Camera className="w-12 h-12 mx-auto mb-2" />
                      <p>Click "Start Camera" to begin live monitoring</p>
                    </div>
                  </div>
                )}
                {streamError && (
                  <div className="absolute inset-0 flex items-center justify-center bg-red-50">
                    <div className="text-center text-red-600">
                      <AlertCircle className="w-12 h-12 mx-auto mb-2" />
                      <p>{streamError}</p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* File Upload Section */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <Upload className="w-5 h-5 mr-2" />
                Upload & Analyze
              </h2>

              <div className="space-y-4">
                {/* Image Upload */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Upload Farm Images
                  </label>
                  <input
                    ref={imageInputRef}
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleFileSelect(e, 'image')}
                    className="hidden"
                  />
                  <button
                    onClick={() => imageInputRef.current?.click()}
                    disabled={uploadProgress.status === 'uploading' || uploadProgress.status === 'analyzing'}
                    className="w-full flex items-center justify-center px-4 py-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-green-400 hover:bg-green-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <ImageIcon className="w-5 h-5 mr-2 text-gray-400" />
                    <span className="text-gray-600">Choose Image File</span>
                  </button>
                </div>

                {/* Video Upload */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Upload Farm Videos
                  </label>
                  <input
                    ref={videoInputRef}
                    type="file"
                    accept="video/*"
                    onChange={(e) => handleFileSelect(e, 'video')}
                    className="hidden"
                  />
                  <button
                    onClick={() => videoInputRef.current?.click()}
                    disabled={uploadProgress.status === 'uploading' || uploadProgress.status === 'analyzing'}
                    className="w-full flex items-center justify-center px-4 py-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-green-400 hover:bg-green-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Video className="w-5 h-5 mr-2 text-gray-400" />
                    <span className="text-gray-600">Choose Video File</span>
                  </button>
                </div>

                {/* Upload Progress */}
                {uploadProgress.status !== 'idle' && (
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center">
                        {getStatusIcon()}
                        <span className="ml-2 text-sm font-medium text-gray-700">
                          {getStatusText()}
                        </span>
                      </div>
                      <span className="text-sm text-gray-500">{uploadProgress.progress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full transition-all duration-300 ${
                          uploadProgress.status === 'error' ? 'bg-red-500' :
                          uploadProgress.status === 'success' ? 'bg-green-500' : 'bg-green-500'
                        }`}
                        style={{ width: `${uploadProgress.progress}%` }}
                      />
                    </div>
                  </div>
                )}

                {/* Current Upload Preview */}
                {Object.entries(previews).map(([filename, preview]) => (
                  <div key={filename} className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h4 className="text-sm font-medium text-gray-700 mb-2">Preview: {filename}</h4>
                    {filename.match(/\.(jpg|jpeg|png|gif|webp)$/i) ? (
                      <img
                        src={preview}
                        alt="Preview"
                        className="w-full h-32 object-cover rounded-md"
                      />
                    ) : (
                      <video
                        src={preview}
                        controls
                        className="w-full h-32 object-cover rounded-md"
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Analysis Results */}
          {analysisResults.length > 0 && (
            <div className="mt-8 bg-white rounded-lg shadow-md p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-800">AI Analysis Results</h2>
                <div className="flex gap-2">
                  <button
                    onClick={downloadAllAnalyses}
                    disabled={analysisResults.length === 0}
                    className="flex items-center px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Download All (TXT)
                  </button>
                  <button
                    onClick={downloadAllAnalysesAsPDF}
                    disabled={analysisResults.length === 0}
                    className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <FileText className="w-4 h-4 mr-2" />
                    Download All (PDF)
                  </button>
                </div>
              </div>
              <div className="space-y-6">
                {analysisResults.map((result, index) => (
                  <div key={index} className="border-l-4 border-green-500 pl-4">
                    <div className="flex items-start gap-4">
                      <div className="flex-shrink-0">
                        {result.type === 'image' ? (
                          <img
                            src={result.preview}
                            alt={result.filename}
                            className="w-24 h-24 object-cover rounded-md"
                          />
                        ) : (
                          <video
                            src={result.preview}
                            className="w-24 h-24 object-cover rounded-md"
                            muted
                          />
                        )}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-2">
                          <h3 className="font-medium text-gray-800 truncate">{result.filename}</h3>
                          <div className="flex items-center space-x-2">
                            <span className="text-xs text-gray-500 whitespace-nowrap">
                              {new Date(result.timestamp).toLocaleString()}
                            </span>
                            <button
                              onClick={() => downloadAnalysis(result)}
                              className="p-2 text-gray-500 hover:text-blue-600 transition-colors"
                              title="Download as text"
                            >
                              <Download className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => downloadAnalysisAsPDF(result)}
                              className="p-2 text-gray-500 hover:text-green-600 transition-colors"
                              title="Download as PDF"
                            >
                              <FileText className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                        <div className="bg-green-50 p-3 rounded-md">
                          <p className="text-sm text-gray-700 whitespace-pre-wrap">{result.analysis}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </Layout>
  );
}